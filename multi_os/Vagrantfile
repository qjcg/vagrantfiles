hosts = {
	# tier 1
	"arch"		=> {"units" => 2, "mem" => "512", "box" => "archlinux/archlinux"},
	"centos"	=> {"units" => 0, "mem" => "512", "box" => "centos/7"},
	"rhel"		=> {"units" => 0, "mem" => "512", "box" => "generic/rhel7"},
	"centos6"	=> {"units" => 0, "mem" => "512", "box" => "centos/6"},
	"debian"	=> {"units" => 0, "mem" => "512", "box" => "debian/contrib-stretch64"},
	"ubuntu"	=> {"units" => 0, "mem" => "512", "box" => "bento/ubuntu-16.04"},

	# tier 2
	"openwrt"	=> {"units" => 0, "mem" => "512", "box" => "ntrepid8/openwrt-15.05-x86"},
	"alpine"	=> {"units" => 0, "mem" => "512", "box" => "generic/alpine36"},
	"ubuntuTrusty"	=> {"units" => 0, "mem" => "512", "box" => "bento/ubuntu-14.04"},
	"opensuse"	=> {"units" => 0, "mem" => "512", "box" => "opensuse/openSUSE-42.1-x86_64"},
	"fedora"	=> {"units" => 0, "mem" => "512", "box" => "fedora/27-cloud-base"},
	"gentoo"	=> {"units" => 0, "mem" => "512", "box" => "generic/gentoo"},
	"freebsd"	=> {"units" => 0, "mem" => "512", "box" => "freebsd/FreeBSD-11.0-STABLE"},
	"openbsd"	=> {"units" => 0, "mem" => "512", "box" => "generic/openbsd6"},

	# windows
	"win7"		=> {"units" => 0, "mem" => "512", "box" => "opentable/win-7-professional-amd64-nocm"},
	"win8"		=> {"units" => 0, "mem" => "512", "box" => "opentable/win-8.1-enterprise-amd64-nocm"},
	"win2008"	=> {"units" => 0, "mem" => "512", "box" => "opentable/win-2008r2-standard-amd64-nocm"},
	"win2012"	=> {"units" => 0, "mem" => "512", "box" => "opentable/win-2012r2-standard-amd64-nocm"},
}

Vagrant.configure(2) do |config|
	hosts.each do |distro, v|

		# Create distro units (instances).
		(1..v["units"]).each do |i|

			# Set variable to be used as *both* the vagrant machine
			# name and the hostname.
			name = "%s-%d" % [distro, i]

			config.vm.define name do |u|
				u.vm.box = v["box"]
				u.vm.hostname = name
				u.vm.network "private_network", type: "dhcp"

				u.vm.provider "virtualbox" do |vb|
					vb.linked_clone = true
					vb.gui = false
					vb.memory = v["mem"]
				end

				# Ansible provisioning.
				u.vm.provision "ansible" do |a|
					a.compatibility_mode = "2.0"
					a.playbook = "playbook.yml"

					# Ensure Arch Linux hosts use python2 as their interpreter.
					a.groups = {
						"arch" => ["arch-[1:5]"],
						"arch:vars" => {"ansible_python_interpreter" => "/usr/bin/python2"},
					}
				end
			end
		end
	end
end
